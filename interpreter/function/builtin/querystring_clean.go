// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"fmt"
	"net/url"
	"sort"
	"strings"

	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/value"
)

const Querystring_clean_Name = "querystring.clean"

var Querystring_clean_ArgumentTypes = []value.Type{value.StringType}

func Querystring_clean_Validate(args []value.Value) error {
	if len(args) != 1 {
		return errors.ArgumentNotEnough(Querystring_clean_Name, 1, args)
	}
	for i := range args {
		if args[i].Type() != Querystring_clean_ArgumentTypes[i] {
			return errors.TypeMismatch(Querystring_clean_Name, i+1, Querystring_clean_ArgumentTypes[i], args[i].Type())
		}
	}
	return nil
}

// Fastly built-in function implementation of querystring.clean
// Arguments may be:
// - STRING
// Reference: https://developer.fastly.com/reference/vcl/functions/query-string/querystring-clean/
func Querystring_clean(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Querystring_clean_Validate(args); err != nil {
		return value.Null, err
	}

	v := value.Unwrap[*value.String](args[0])
	parsed, err := url.Parse(v.Value)
	if err != nil {
		return value.Null, errors.New(
			Querystring_clean_Name, "Failed to parse url: %s, error: %s", v.Value, err.Error(),
		)
	}

	// Sort query names to fix fragile tests (correct map order)
	queries := parsed.Query()
	var keys []string
	for k := range queries {
		keys = append(keys, k)
	}
	sort.Strings(keys)

	var cleaned []string
	for _, k := range keys {
		if k == "" {
			continue
		}

		val := queries[k]
		name := url.QueryEscape(k)
		for i := range val {
			if val[i] == "" {
				cleaned = append(cleaned, name)
				continue
			}
			cleaned = append(cleaned, fmt.Sprintf("%s=%s", name, url.QueryEscape(val[i])))
		}
	}

	var sign string
	if len(cleaned) > 0 {
		sign = "?"
	}

	path := v.Value
	if idx := strings.Index(path, "?"); idx != -1 {
		path = path[0:idx]
	}

	return &value.String{Value: path + sign + strings.Join(cleaned, "&")}, nil
}
