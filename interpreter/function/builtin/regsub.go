// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"regexp"

	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/value"
)

const Regsub_Name = "regsub"

var Regsub_ArgumentTypes = []value.Type{value.StringType, value.StringType, value.StringType}

func Regsub_Validate(args []value.Value) error {
	if len(args) != 3 {
		return errors.ArgumentNotEnough(Regsub_Name, 3, args)
	}
	for i := range args {
		if args[i].Type() != Regsub_ArgumentTypes[i] {
			return errors.TypeMismatch(Regsub_Name, i+1, Regsub_ArgumentTypes[i], args[i].Type())
		}
	}
	return nil
}

// Fastly built-in function implementation of regsub
// Arguments may be:
// - STRING, STRING, STRING
// Reference: https://developer.fastly.com/reference/vcl/functions/strings/regsub/
func Regsub(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Regsub_Validate(args); err != nil {
		return value.Null, err
	}

	input := value.Unwrap[*value.String](args[0])
	pattern := value.Unwrap[*value.String](args[1])
	replacement := value.Unwrap[*value.String](args[2])

	re, err := regexp.Compile(pattern.Value)
	if err != nil {
		ctx.FastlyError = &value.String{Value: "EREGRECUR"}
		return &value.String{Value: input.Value}, errors.New(
			Regsub_Name, "Invalid regular expression pattern: %s", pattern.Value,
		)
	}

	// regsub should replace first match only
	var first bool
	ret := re.ReplaceAllStringFunc(input.Value, func(match string) string {
		if !first {
			first = true
			return replacement.Value
		}
		return match
	})

	return &value.String{Value: ret}, nil
}
