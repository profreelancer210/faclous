// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"testing"

	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/value"
)

// Fastly built-in function testing implementation of randomint_seeded
// Arguments may be:
// - INTEGER, INTEGER, INTEGER
// Reference: https://developer.fastly.com/reference/vcl/functions/randomness/randomint-seeded/
func Test_Randomint_seeded(t *testing.T) {
	tests := []struct {
		from   int64
		to     int64
		expect int64
		seed   int64
	}{
		{from: 0, to: 99, expect: 53, seed: 1000000},
		{from: 0, to: 99, expect: 2, seed: 1000001},
		{from: -1, to: 0, expect: 0, seed: 1000000},
		{from: -1, to: 0, expect: -1, seed: 1000001},
		{from: 0, to: 0, expect: 0, seed: 0},
	}

	for i, tt := range tests {
		ret, err := Randomint_seeded(
			&context.Context{},
			&value.Integer{Value: tt.from},
			&value.Integer{Value: tt.to},
			&value.Integer{Value: tt.seed},
		)
		if err != nil {
			t.Errorf("[%d] Unexpected error: %s", i, err)
		}
		if ret.Type() != value.IntegerType {
			t.Errorf("[%d] Unexpected return type, expect=STRING, got=%s", i, ret.Type())
		}
		v := value.Unwrap[*value.Integer](ret)
		if v.Value != tt.expect {
			t.Errorf("[%d] Unexpected return value, expect=%d, got=%d", i, tt.expect, v.Value)
		}
	}
}
