// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"unicode/utf8"

	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/function/errors"
	"github.com/ysugimoto/falco/interpreter/value"
)

const Utf8_substr_Name = "utf8.substr"

var Utf8_substr_ArgumentTypes = []value.Type{value.StringType, value.IntegerType, value.IntegerType}

func Utf8_substr_Validate(args []value.Value) error {
	if len(args) < 2 || len(args) > 3 {
		return errors.ArgumentNotInRange(Utf8_substr_Name, 2, 3, args)
	}
	for i := range args {
		if args[i].Type() != Utf8_substr_ArgumentTypes[i] {
			return errors.TypeMismatch(Utf8_substr_Name, i+1, Utf8_substr_ArgumentTypes[i], args[i].Type())
		}
	}
	return nil
}

// Fastly built-in function implementation of utf8.substr
// Arguments may be:
// - STRING, INTEGER, INTEGER
// - STRING, INTEGER
// Reference: https://developer.fastly.com/reference/vcl/functions/strings/utf8-substr/
func Utf8_substr(ctx *context.Context, args ...value.Value) (value.Value, error) {
	// Argument validations
	if err := Utf8_substr_Validate(args); err != nil {
		return value.Null, err
	}

	v := value.Unwrap[*value.String](args[0])
	if !utf8.Valid([]byte(v.Value)) {
		return &value.String{}, nil
	}
	input := []rune(v.Value)
	offset := int(value.Unwrap[*value.Integer](args[1]).Value)
	var length *int
	if len(args) > 2 {
		v := int(value.Unwrap[*value.Integer](args[2]).Value)
		length = &v
	}

	var start, end int
	if offset < 0 {
		start = len(input) + offset
		if start < 0 {
			return &value.String{}, nil
		}
	} else {
		start = offset
	}
	if length == nil {
		end = len(input)
	} else if *length < 0 {
		end = len(input) + *length
	} else {
		end = start + *length
		// Handle integer overflow
		if end < 0 {
			return &value.String{}, nil
		}
	}
	if end > len(input) {
		end = len(input)
	}

	if start > len(input) {
		return &value.String{}, nil
	}
	if end <= start {
		return &value.String{}, nil
	}
	return &value.String{Value: string(input[start:end])}, nil
}
