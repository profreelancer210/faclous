// Code generated by __generator__/interpreter.go at once

package builtin

import (
	"testing"

	"github.com/ysugimoto/falco/interpreter/context"
	"github.com/ysugimoto/falco/interpreter/value"
)

// Fastly built-in function testing implementation of randombool_seeded
// Arguments may be:
// - INTEGER, INTEGER, INTEGER
// Reference: https://developer.fastly.com/reference/vcl/functions/randomness/randombool-seeded/
func Test_Randombool_seeded(t *testing.T) {
	tests := []struct {
		n      int64
		d      int64
		s      int64
		expect bool
	}{
		{n: 1, d: 10, s: 1000000, expect: false},
		{n: 1, d: 10, s: 1000006, expect: true},
		{n: 3, d: 4, s: 1111107, expect: false},
		{n: 3, d: 4, s: 1111119, expect: true},
		{n: 5, d: 10, s: 2222222, expect: true},
		{n: 5, d: 0, s: 2222222, expect: false},
	}

	for i, tt := range tests {
		ret, err := Randombool_seeded(
			&context.Context{},
			&value.Integer{Value: tt.n},
			&value.Integer{Value: tt.d},
			&value.Integer{Value: tt.s},
		)
		if err != nil {
			t.Errorf("[%d] Unexpected error: %s", i, err)
		}
		if ret.Type() != value.BooleanType {
			t.Errorf("[%d] Unexpected return type, expect=STRING, got=%s", i, ret.Type())
		}
		v := value.Unwrap[*value.Boolean](ret)
		if v.Value != tt.expect {
			t.Errorf("[%d] Unexpected return value, expect=%t, got=%t", i, tt.expect, v.Value)
		}
	}
}
